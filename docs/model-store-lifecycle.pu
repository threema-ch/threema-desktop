@startuml
title Model Store Lifecycle
hide footbox

database Database order 90
database LocalModelStoreCache as Cache order 100
actor "API Consumer" as User order 0

== Create ==

' Load data
User -> Database : loadData()
activate Database
return (view, uid)
deactivate Database

' Instantiate model store
create LocalModelStore as Store order 10
User -> Store : new(view, uid)
activate Store

' Create model controller
create ModelController as Controller order 20
Store -> Controller : new(uid)

' Create lifetime guard
create ModelLifetimeGuard as Guard order 30
activate Controller
Controller -> Guard : new()
activate Guard

' Return values for model store
Guard --> Controller : lifetimeGuard
deactivate Guard
Controller --> Store : controller
deactivate Controller

' Activate lifetime guard
Store -> Guard : activate(getViewFn, updateFn)
note right : Activation of the lifetime guard exposes\nthe view and the update function of the\nmodel store towards the guard and\nthus indirectly to the controller.
activate Guard

' Return value for user
Store --> User : modelStore
deactivate Store

User -> Cache : add(modelStore)

|||

== Update ==

User -> Controller : updateValue(value)
activate Controller
Controller -> Guard : update(executorFn)
activate Guard
Guard -> Store : update(executorFn)
note left : The lifetime guard can only access the\nmodel store if it was activated.
activate Store
group Update Executor Function
  note over Store, Guard : The update executor function is passed in by the controller method. It receives\nthe current view and returns a changeset: meta.update((view) => /*changeset*/)
  Store -> Database : updateData(changeset)
  activate Database
  Database --> Store : OK
  deactivate Database
end
Store -> Store : setStoreValue()
Store -> Store : notifySubscribers()
Store --> Guard : OK
deactivate Store
Guard --> Controller : OK
deactivate Guard
Controller -> User : OK
deactivate Controller

|||

== Delete ==

User -> Controller : remove()
activate Controller
Controller -> Guard : deactivate(executorFn)
activate Guard
group Deactivate Executor Function
      note over Guard, Cache : The deactivate executor function is passed in by the controller method.\nAfter it runs, the controller will not be able to access the store anymore.
  Guard -> Database : remove(uid)
  activate Database
  Database --> Guard : OK
  deactivate Database
end

Guard -> Guard : deactivate()
Guard --> Controller : OK
deactivate Guard
deactivate Guard
Controller --> User : OK
deactivate Controller

@enduml
