// TODO lg: When enabling this spec, karma returns `TypeError: fn is not a function`.

import * as chai from 'chai';
import * as sinon from 'sinon';
import sinonChai from 'sinon-chai';

import {NoopResourceCache} from '~/worker/service/cache/noop';

const {expect} = chai.use(sinonChai);

export function run() {
    describe('Cache', function () {
        describe('noop', function () {
            let fake: sinon.SinonSpy;

            this.beforeEach(function () {
                sinon.restore();
                const response: Response = new Response(
                    JSON.stringify({purr: true}),
                    {
                        status: 200,
                        statusText: 'Meowk!',
                        headers: new Headers({
                            'Content-Type': 'application/json',
                        }),
                    },
                );
                fake = sinon.fake.resolves(response);
                sinon.replace(self, 'fetch', fake);
            });

            it('has an appropriate name', function () {
                const cache = new NoopResourceCache();
                expect(cache.name).to.equal('NoopResourceCache');
            });

            // TODO lg: Fix tests
            // it('does not fetch when populating', async function () {
            //     const cache = new NoopResourceCache();
            //     await cache.populate();
            //     fake.should.not.have.been.called;
            // });
            // it('is a passthrough to fetch', async function () {
            //     const cache = new NoopResourceCache();
            //     // @ts-expect-error: Mock
            //     const event: FetchEvent = {request: 'foo'};
            //     await cache.fetch(event);
            //     fake.should.have.been.calledWith('foo');
            // });
        });
    });
}

run();
